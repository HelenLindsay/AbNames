[{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://helenlindsay.github.io/AbNames/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to AbNames","text":"AbNames performs two tasks: Extracting potential gene names antibody names, Matching human antibody names gene names, IDs protein complex IDs. Antibody names reported consistent format published data. Antibodies often named according antigen target, may name protein (complex) antigen part . Antibodies may target multi-subunit protein complexes, can reflected name, e.g. antibody T-cell receptor alpha beta subunits might named TCRab. Antibody names may also include name clone antibody derived names fluorophores DNA-oligos antibody conjugated . reasons, can difficult exactly match antibody names gene protein names. cell surface antigens often similar names, searching partial matches names free-text gene descriptions challenging error-prone.","code":""},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"goals","dir":"Articles","previous_headings":"","what":"Goals","title":"Introduction to AbNames","text":"Standardise names data sets combined analysis","code":""},{"path":[]},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Introduction to AbNames","text":"AbNames contains several curated gene name data sets matching antibody names.","code":""},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"hgnc-gene-names","dir":"Articles","previous_headings":"Data","what":"HGNC gene names","title":"Introduction to AbNames","text":"hgnc data set reformatted version protein-coding gene information downloaded Human Gene Names Consortium. includes previous (obsolete) gene names aliases, experience useful matching antibody names. hgnc_long data set contains seq gene identifiers hgnc data set, long format (one alias per row). Load using:","code":"library(AbNames) library(dplyr)  data(\"hgnc\", package = \"AbNames\") # hgnc_long is loaded similarly  # Show the first entries of hgnc, where each row is the start of one column dplyr::glimpse(hgnc)  #> Rows: 139,296 #> Columns: 7 #> $ HGNC_ID     <chr> \"HGNC:5\", \"HGNC:5\", \"HGNC:24086\", \"HGNC:24086\", \"HGNC:2408… #> $ ENSEMBL_ID  <chr> \"ENSG00000121410\", \"ENSG00000121410\", \"ENSG00000148584\", \"… #> $ UNIPROT_IDS <chr> \"P04217\", \"P04217\", \"Q9NQ94\", \"Q9NQ94\", \"Q9NQ94\", \"Q9NQ94\"… #> $ HGNC_SYMBOL <chr> \"A1BG\", \"A1BG\", \"A1CF\", \"A1CF\", \"A1CF\", \"A1CF\", \"A1CF\", \"A… #> $ symbol_type <chr> \"HGNC_SYMBOL\", \"HGNC_NAME\", \"HGNC_SYMBOL\", \"HGNC_NAME\", \"A… #> $ value       <chr> \"A1BG\", \"alpha-1-B glycoprotein\", \"A1CF\", \"APOBEC1 complem… #> $ SOURCE      <chr> \"HGNC\", \"HGNC\", \"HGNC\", \"HGNC\", \"HGNC\", \"HGNC\", \"HGNC\", \"H…  # (Note: it isn't necessary to use dplyr:: to call \"glimpse\" as dplyr is loaded # with the library call above. This syntax is used to make it clear which # packages functions belong to)"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"biolegend-antibodies","dir":"Articles","previous_headings":"Data","what":"BioLegend antibodies","title":"Introduction to AbNames","text":"BioLegend major supplier antibodies, provides several antibody panels CITE-seq analyses. data set “totalseq_cocktails” re-formatted version TotalSeq cocktails data sheets available BioLegend website, including BioLegend antibody names Ensembl gene IDs. isotypes antibodies included TotalSeq data sheets. Load using: Note “Antigen” column refers antibody names prefixes “anti-human” removed.","code":"data(\"totalseq_cocktails\", package = \"AbNames\") dplyr::glimpse(totalseq_cocktails) #> Rows: 485 #> Columns: 9 #> $ Antigen          <chr> \"CD86\", \"CD274 (B7-H1, PD-L1)\", \"CD270 (HVEM, TR2)\", … #> $ Clone            <chr> \"IT2.2\", \"29E.2A3\", \"122\", \"SKII.4\", \"TX31\", \"CC2C6\",… #> $ ENSEMBL_ID       <chr> \"ENSG00000114013\", \"ENSG00000120217\", \"ENSG0000015787… #> $ Oligo_ID         <chr> \"0006\", \"0007\", \"0020\", \"0023\", \"0024\", \"0026\", \"0029… #> $ TotalSeq_Cat     <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\"… #> $ Barcode_Sequence <chr> \"GTCTTTGTCAGTGCA\", \"GTTGTCCGACAATAC\", \"TGATAGAAACAGAC… #> $ Reactivity       <chr> \"human\", \"human\", \"human\", \"human\", \"human\", \"human\",… #> $ HGNC_ID          <chr> \"HGNC:1705\", \"HGNC:17635\", \"HGNC:11912\", \"HGNC:9705\",… #> $ HGNC_SYMBOL      <chr> \"CD86\", \"CD274\", \"TNFRSF14\", \"PVR\", \"NECTIN2\", \"CD47\"…"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"cite-seq-antibodies","dir":"Articles","previous_headings":"Data","what":"CITE-seq antibodies","title":"Introduction to AbNames","text":"table matching antibody names gene protein IDs >20 data sets publicly available CITE-seq data. data sets data worked happy add data sets provided. AbNames package collects functions used create table. table (YET) includes manually curated matches antibody names gene IDs cases unable find exact match antibody name provided. Isotype controls manually identified based either name, e.g. “IgG1 Isotype Ctrl” reactivity, e.g. “Mouse IgG2b”. Load using column “Antigen” refers name given authors study table resources used. minimal formatting done, example fixing Greek characters accidentally transformed upon data import.","code":"# As the citeseq data set contains raw data, it is loaded differently # than the other data sets   citeseq_fname <- system.file(\"extdata\", \"citeseq.csv\", package = \"AbNames\") citeseq <- read.csv(citeseq_fname) %>% unique() dplyr::glimpse(citeseq) #> Rows: 2,203 #> Columns: 8 #> $ Antigen      <chr> \"2B4\", \"4.1BB\", \"4.1BBL\", \"Annexin V\", \"anti-c-Met\", \"ant… #> $ Study        <chr> \"Wu_2021_b\", \"Wu_2021_b\", \"Wu_2021_b\", \"Kotliarov_2020\", … #> $ Clone        <chr> \"C1.7\", \"4B4-1\", \"5F4\", NA, \"12.1\", \"12.1\", \"12.1\", \"PE00… #> $ Cat_Number   <chr> \"329527\", \"309835\", \"311509\", \"custom made (similar to 94… #> $ Oligo_ID     <chr> \"0189\", \"0355\", \"0022\", \"0025\", \"1055\", \"1055\", NA, \"0911… #> $ TotalSeq_Cat <chr> \"A\", \"A\", \"A\", \"A\", \"C\", \"C\", NA, \"A\", \"A\", \"C\", \"A\", \"A\"… #> $ Vendor       <chr> \"BioLegend\", \"BioLegend\", \"BioLegend\", \"BioLegend\", \"BioL… #> $ Control      <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…  # TO DO: AS THIS IS ONLY A SUBSET OF THE CITESEQ INFO, THERE ARE APPARENT # DUPLICATES, DECIDE WHAT TO DO WITH THESE"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"creating-a-query-table","dir":"Articles","previous_headings":"","what":"Creating a query table","title":"Introduction to AbNames","text":"illustrate problem matching antibody names gene names, let’s look example citeseq data set. antigen names refer cell surface protein.","code":"# The regular expression inside \"grepl\" searches for PD.L1, PD-L1, PDL1 or CD274  cd274 <- citeseq %>%     dplyr::filter(grepl(\"PD[\\\\.-]?L1|CD274\", Antigen)) %>%     dplyr::pull(Antigen) %>%     unique()  cd274 #> [1] \"CD274\"                \"CD274 (B7-H1, PD-L1)\" \"CD274 (PD-L1)\"        #> [4] \"PD-L1\"                \"PD-L1 (CD274)\"        \"PDL1\"                 #> [7] \"PDL1 (CD274)\""},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"default-query-table","dir":"Articles","previous_headings":"Creating a query table","what":"Default query table","title":"Introduction to AbNames","text":"demonstrate create default query table using raw CITE-seq data set. collects information reagents tables provided supplementary material studies used. example shows antibody name reformatted several ways. querying data set, search exact match strings.","code":"# Add an ID column to the citeseq data set to allow the results table to be merged citeseq <- AbNames::addID(citeseq) #> Warning in AbNames::addID(citeseq): ID columns do not uniquely identify rows, #> row numbers added.  # Remove control columns, as we are only searching human proteins controls <- dplyr::filter(citeseq, Control) citeseq <- dplyr::filter(citeseq, ! Control)  # Select just the columns that are needed for querying: citeseq_q <- citeseq %>% dplyr::select(ID, Antigen)  # Apply the default transformation sequence and make a query table in long format query_df <- AbNames::makeQueryTable(citeseq_q, ab = \"Antigen\") #> Warning in (function (df, ex, f, ...) : Rows were added when merging split #> data.frames  # Print one example antigen from the query table: query_df %>%     dplyr::filter(ID == \"TCR alpha/beta__Hao_2021\") #> # A tibble: 7 × 3 #>   ID                       name          value                       #>   <chr>                    <chr>         <chr>                       #> 1 TCR alpha/beta__Hao_2021 Antigen       TCR alpha/beta              #> 2 TCR alpha/beta__Hao_2021 greek_word    TCR alpha/beta              #> 3 TCR alpha/beta__Hao_2021 greek_letter  TCR a/b                     #> 4 TCR alpha/beta__Hao_2021 upper_no_dash TCR A/B                     #> 5 TCR alpha/beta__Hao_2021 lower_no_dash tcr a/b                     #> 6 TCR alpha/beta__Hao_2021 TCR_long      T cell receptor alpha locus #> 7 TCR alpha/beta__Hao_2021 TCR_long      T cell receptor beta locus"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"custom-query-table","dir":"Articles","previous_headings":"Creating a query table","what":"Custom query table","title":"Introduction to AbNames","text":"AbNames provides template functions can used construct pipeline creating query table. default query table uses function defaultQuery create list partial functions applied recursively data.frame using magrittr::freduce. use strategy, functions must accept data.frame required argument. arguments filled creating partial functions. default function list can used starting point add extra formatting functions, remove modify certain steps. individual formatting functions introduced (FAR T-CELL RECEPTORS)","code":"# Get the default sequence of formatting functions  default_funs <- AbNames::defaultQuery()  # Print the first two formatting functions as an example default_funs[1:2] #> [[1]] #> <partialised> #> function (...)  #> gsubAb(ab = \"Antigen\", ...) #>  #> [[2]] #> <partialised> #> function (...)  #> gsubAb(ab = \"Antigen\", pattern = \"\\\\s[Rr]ecombinant\", ...)"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"t-cell-receptors","dir":"Articles","previous_headings":"Creating a query table > Custom query table","what":"T-cell receptors","title":"Introduction to AbNames","text":"found querying HGNC gene description easiest way match names antibodies T-cell receptor gene IDs. (alternative method search gene symbol.) start data.frame antibodies T-cell receptor CITE-seq data set. already done fomatting names, e.g.  “TCR Va24-Ja18 (iNKT cell)” removed section brackets. wish create query data.frame subunit TCR complex appears separate line. Now use function formatTCR format antibody names querying gene description field HGNC data set.","code":"tcr <- data.frame(Antigen =                       c(\"TCR alpha/beta\", \"TCRab\", \"TCR gamma/delta\", \"TCRgd\",                         \"TCR g/d\", \"TCR Vgamma9\", \"TCR Vg9\", \"TCR Vd2\",                         \"TCR Vdelta2\", \"TCR Vα24-Jα18\", \"TCRVa24.Ja18\",                          \"TCR Valpha24-Jalpha18\", \"TCR Vα7.2\", \"TCR Va7.2\",                         \"TCRa7.2\", \"TCRVa7.2\", \"TCR Vbeta13.1\", \"TCR γ/δ\",                          \"TCR Vβ13.1\", \"TCR Vγ9\", \"TCR Vδ2\", \"TCR α/β\",                         \"TCRb\", \"TCRg\"))   # First, we convert the Greek symbols to letters.   # Note that as we are using replaceGreekSyms in a dplyr pipeline, we don't  # put quotes around the column name, i.e. Antigen not \"Antigen\".  tcr <- tcr %>%     dplyr::mutate(query =                      AbNames::replaceGreekSyms(Antigen, replace = \"sym2letter\"))   # Print out a few rows to see the result tcr %>%      dplyr::filter(Antigen %in% c(\"TCR Vβ13.1\", \"TCR Vδ2\", \"TCR α/β\")) #>      Antigen      query #> 1 TCR Vβ13.1 TCR Vb13.1 #> 2    TCR Vδ2    TCR Vd2 #> 3    TCR α/β    TCR a/b tcr_f <- AbNames::formatTCR(tcr, tcr = \"query\")  # Print out the first few rows tcr_f %>%     head()  #>           Antigen           query                    TCR_long #> 1  TCR alpha/beta  TCR alpha/beta T cell receptor alpha locus #> 2  TCR alpha/beta  TCR alpha/beta  T cell receptor beta locus #> 3           TCRab           TCRab T cell receptor alpha locus #> 4           TCRab           TCRab  T cell receptor beta locus #> 5 TCR gamma/delta TCR gamma/delta T cell receptor gamma locus #> 6 TCR gamma/delta TCR gamma/delta T cell receptor delta locus"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"querying-a-dataset","dir":"Articles","previous_headings":"","what":"Querying a dataset","title":"Introduction to AbNames","text":"pipeline query HGNC use datasets antibody vendor information find matches unmatched antibodies. default, require matches must found subunits multi-subunit protein avoid incorrect matches. query HGNC data set CITE-seq antibodies, using query table created . results table contains (just) matches query table HGNC tables. example , see “name” column formatting function generated string “value” column matched, “symbol_type” column column HGNC data matched. multiple matches given ID, official symbol (“HGNC_SYMBOL”) preferred aliases previous symbols. may wish review matches merging results original table. example, can check matches different genes name guessed multi-subunit protein. However, also cases results table contains false matches, example: table, see “value” column gene “ENSG00000157873” alias symbols “CD270”, “HVEM” “TR2”. next two rows show genes alias symbols “TR2”. guess gene matches correct one. NOTE: haven’t written convenience function merging back original table yet. TODO: Add official HGNC symbols back HGNC data set QUERY CD11/CD18 protein ontology Remove redundant results Antigen/greek_letter e.g. “KLRG1 (MAFA)-Qian_2020” examples discuss? *“KIR2DL5” matches two genes HGNC:16345 HGNC:16346 *“CD279 (PD-1)-Mimitou_2021_cite_and_dogma_seq” *“DR3 (TRAMP)-Liu_2021” now remove genes multiple matches merging results citeseq data.","code":"hgnc_results <- searchHGNC(query_df) #> Joining, by = \"value\" #> Joining, by = \"HGNC_ID\"  # Print 10 random results: hgnc_results %>%     dplyr::select(ID, name, value, symbol_type) %>%     dplyr::ungroup() %>%     dplyr::sample_n(10) #> # A tibble: 10 × 4 #>    ID                                     name                 value symbol_type #>    <chr>                                  <chr>                <chr> <chr>       #>  1 IgD__Kotliarov_2020                    Ig                   IGHD  HGNC_SYMBOL #>  2 CD59__Qian_2020                        greek_word           CD59  HGNC_SYMBOL #>  3 CD27__Kaufmann_2021                    greek_word           CD27  HGNC_SYMBOL #>  4 CD4__Hao_2021__2                       greek_word           CD4   HGNC_SYMBOL #>  5 CD163__Mimitou_2021_cite_and_dogma_seq greek_word           CD163 HGNC_SYMBOL #>  6 CD137 (4-1BB)__Kotliarov_2020          Antigen|greek_word|… CD13… alias_symb… #>  7 CD4__Qian_2020                         greek_word           CD4   HGNC_SYMBOL #>  8 CD8__Pont_2020                         Antigen|greek_word|… CD8   prev_symbol #>  9 CD184 (CXCR4)__Hao_2021                greek_word           CXCR4 HGNC_SYMBOL #> 10 CD274__Qi_2020                         greek_word           CD274 HGNC_SYMBOL hgnc_results <- hgnc_results %>%     dplyr::group_by(ID) %>%     dplyr::mutate(n_ids = dplyr::n_distinct(HGNC_ID)) # Count distinct IDs      # Select antigens where there are matches to multiple genes but not # because the antibody is against a multi-gene protein  multi_gene <- hgnc_results %>%     dplyr::filter(n_ids > 1, ! all(name %in% c(\"TCR_long\", \"subunit\"))) %>%     dplyr::select(ID, name, value, HGNC_ID)  # Look at the first group in multi_gene. # Set interactive = FALSE for interactive exploration showGroups(multi_gene, 1, interactive = FALSE) #> Group 1 of 101: 14 rows #>                       ID                            name value   HGNC_ID #> 1  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 2  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 3  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 4  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 5  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 6  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 7  CD11a.CD18__Wu_2021_b                   upper_no_dash CD11A HGNC:6148 #> 8  CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155 #> 9  CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155 #> 10 CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155 #> 11 CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155 #> 12 CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155 #> 13 CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155 #> 14 CD11a.CD18__Wu_2021_b Antigen|greek_word|greek_letter  CD18 HGNC:6155  # This is an example where the antibody is against a heterodimeric protein. # We can confirm this by looking up the vendor catalogue number: citeseq %>%     dplyr::filter(ID == \"CD11a.CD18-Wu_2021_b\") %>%     dplyr::select(Antigen, Cat_Number, Vendor) #> Adding missing grouping variables: `ID` #> # A tibble: 0 × 4 #> # Groups:   ID [0] #> # … with 4 variables: ID <chr>, Antigen <chr>, Cat_Number <chr>, Vendor <chr> hgnc_results %>%     dplyr::filter(ID == \"CD270 (HVEM, TR2)-Hao_2021\") %>%     data.frame() #>  [1] ID          name        value       HGNC_ID     ENSEMBL_ID  alias_name  #>  [7] prev_name   UNIPROT_IDS symbol_type n_matches   HGNC_SYMBOL n_ids       #> <0 rows> (or 0-length row.names) nrow(hgnc_results) #> [1] 24414  # Remove matches to several genes, select just columns of interest hgnc_results <- hgnc_results %>%     dplyr::filter(n_ids == 1 | all(name %in% c(\"TCR_long\", \"subunit\"))) %>%     dplyr::select(ID, HGNC_ID, HGNC_SYMBOL, ENSEMBL_ID, UNIPROT_IDS) %>%     unique() %>% # Collapse results with same ID from different queries     dplyr::summarise(dplyr::across(c(HGNC_ID, HGNC_SYMBOL,                                      ENSEMBL_ID, UNIPROT_IDS),                                    toString)) # Collapse multi-subunit entries  nrow(hgnc_results) #> [1] 1865  citeseq <- citeseq %>%     dplyr::left_join(hgnc_results, by = \"ID\") %>%     dplyr::relocate(ID, Antigen, Cat_Number, HGNC_ID) %>%     unique()  head(citeseq) #> # A tibble: 6 × 13 #> # Groups:   ID [6] #>   ID         Antigen Cat_Number HGNC_ID Study Clone Oligo_ID TotalSeq_Cat Vendor #>   <chr>      <chr>   <chr>      <chr>   <chr> <chr> <chr>    <chr>        <chr>  #> 1 2B4__Wu_2… 2B4     329527     HGNC:1… Wu_2… C1.7  0189     A            BioLe… #> 2 4.1BB__Wu… 4.1BB   309835     HGNC:1… Wu_2… 4B4-1 0355     A            BioLe… #> 3 4.1BBL__W… 4.1BBL  311509     HGNC:1… Wu_2… 5F4   0022     A            BioLe… #> 4 Annexin V… Annexi… custom ma… NA      Kotl… NA    0025     A            BioLe… #> 5 anti-c-Me… anti-c… NA         NA      Liu_… 12.1  1055     C            BioLe… #> 6 anti-c-Me… anti-c… NA         NA      Su_2… 12.1  1055     C            NA     #> # … with 4 more variables: Control <lgl>, HGNC_SYMBOL <chr>, ENSEMBL_ID <chr>, #> #   UNIPROT_IDS <chr>"},{"path":[]},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"filling-using-the-totalseq-cocktails","dir":"Articles","previous_headings":"Filling missing information","what":"Filling using the TotalSeq cocktails","title":"Introduction to AbNames","text":"can annotate antibodies annotated using HGNC using totalseq_cocktails table:","code":"count_missing <- function(df){     dplyr::filter(df, is.na(HGNC_ID)) %>% nrow() }  data(totalseq_cocktails) ts <- totalseq_cocktails %>%     dplyr::select(any_of(colnames(citeseq)))  missing <- count_missing(citeseq)  # Fill in IDs where Antigen, Oligo, Clone and TotalSeq category match citeseq <- citeseq %>%     dplyr::rows_patch(ts,                       by = c(\"Antigen\", \"Oligo_ID\", \"Clone\", \"TotalSeq_Cat\"),                       unmatched = \"ignore\")  missing_after_ts <- count_missing(citeseq)  # Missing before filling: missing #> [1] 265  # Still missing after filling with TotalSeq: missing_after_ts #> [1] 162"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"inspecting-groups-before-filling","dir":"Articles","previous_headings":"Filling missing information","what":"Inspecting groups before filling","title":"Introduction to AbNames","text":"filling information reference data set, can useful look entries example annotations inconsistent. showGroups function allows users interactively print group(s) grouped data.frame. give (non-interactive) example .","code":""},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"filling-nas-using-a-reference-data-set","dir":"Articles","previous_headings":"Filling missing information","what":"Filling NAs using a reference data set","title":"Introduction to AbNames","text":"function fillByGroup used fill NAs grouped data.frame. differs tidyr::fill treatment inconsistent values. Whereas tidyr::fill fill using first value, fillByGroup offers option fill frequent value. can useful filling antibody IDs given antibody name clone catalogue number. fill using reference data set, strategy used either add temporary ID column, join two data.frames, fill separate using ID column, use dplyr::rows_patch. demonstrate latter approach . example, can see antibodies catalogue number “300475”, match found antibody named “CD3E” named “CD3”. can fill missing information using fillByGroup: Now fill gene information citeseq data similarly, check many antibodies matched.","code":"# Before filling, check how many antibodies were matched. original_nmatched <- count_missing(citeseq)  # Select some data to demonstrate filling: # Get entries sharing the same catalogue number, # where not every entry has a match fill_demo <- citeseq %>%     dplyr::group_by(Cat_Number) %>%     dplyr::arrange(Cat_Number) %>%     dplyr::filter(!is.na(Cat_Number),                    any(is.na(HGNC_ID)),                   ! all(is.na(HGNC_ID)))  AbNames::showGroups(fill_demo, interactive = FALSE) #> Group 1 of 14: 9 rows #>                        ID    Antigen Cat_Number   HGNC_ID            Study #> 1   CD3__Arunachalam_2020        CD3     300475 HGNC:1673 Arunachalam_2020 #> 2         CD3__Cadot_2020        CD3     300475 HGNC:1673       Cadot_2020 #> 3        CD3__Hao_2021__1        CD3     300475 HGNC:1673         Hao_2021 #> 4          CD3__Pont_2020        CD3     300475 HGNC:1673        Pont_2020 #> 5     CD3__Witkowski_2020        CD3     300475 HGNC:1673   Witkowski_2020 #> 6          CD3__Wu_2021_b        CD3     300475 HGNC:1673        Wu_2021_b #> 7          CD3__Qian_2020        CD3     300475 HGNC:1673        Qian_2020 #> 8        CD3__Stuart_2019        CD3     300475      <NA>      Stuart_2019 #> 9 CD3 (CD3E)__Nathan_2021 CD3 (CD3E)     300475 HGNC:1674      Nathan_2021 #>   Clone Oligo_ID TotalSeq_Cat    Vendor Control HGNC_SYMBOL      ENSEMBL_ID #> 1 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 2 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 3 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 4 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 5 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 6 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 7 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 8 UCHT1     0034         <NA>      <NA>   FALSE        <NA>            <NA> #> 9 UCHT1     0034         <NA>      <NA>   FALSE        CD3E ENSG00000198851 #>   UNIPROT_IDS #> 1        <NA> #> 2        <NA> #> 3        <NA> #> 4        <NA> #> 5        <NA> #> 6        <NA> #> 7        <NA> #> 8        <NA> #> 9      P07766 fill_demo <- AbNames::fillByGroup(fill_demo, \"Cat_Number\",                                   fill = c(\"HGNC_ID\", \"TotalSeq_Cat\", \"Vendor\",                                            \"ENSEMBL_ID\", \"UNIPROT_IDS\")) %>%     dplyr::group_by(Cat_Number) # Re-group as fillByGroup ungroups  # Print out the first group again AbNames::showGroups(fill_demo, interactive = FALSE) #> Group 1 of 14: 9 rows #>                        ID    Antigen Cat_Number   HGNC_ID            Study #> 1   CD3__Arunachalam_2020        CD3     300475 HGNC:1673 Arunachalam_2020 #> 2         CD3__Cadot_2020        CD3     300475 HGNC:1673       Cadot_2020 #> 3        CD3__Hao_2021__1        CD3     300475 HGNC:1673         Hao_2021 #> 4          CD3__Pont_2020        CD3     300475 HGNC:1673        Pont_2020 #> 5     CD3__Witkowski_2020        CD3     300475 HGNC:1673   Witkowski_2020 #> 6          CD3__Wu_2021_b        CD3     300475 HGNC:1673        Wu_2021_b #> 7          CD3__Qian_2020        CD3     300475 HGNC:1673        Qian_2020 #> 8        CD3__Stuart_2019        CD3     300475 HGNC:1674      Stuart_2019 #> 9 CD3 (CD3E)__Nathan_2021 CD3 (CD3E)     300475 HGNC:1674      Nathan_2021 #>   Clone Oligo_ID TotalSeq_Cat    Vendor Control HGNC_SYMBOL      ENSEMBL_ID #> 1 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 2 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 3 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 4 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 5 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 6 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 7 UCHT1     0034            A BioLegend   FALSE        CD3D ENSG00000167286 #> 8 UCHT1     0034            A BioLegend   FALSE        <NA> ENSG00000198851 #> 9 UCHT1     0034            A BioLegend   FALSE        CD3E ENSG00000198851 #>   UNIPROT_IDS #> 1      P07766 #> 2      P07766 #> 3      P07766 #> 4      P07766 #> 5      P07766 #> 6      P07766 #> 7      P07766 #> 8      P07766 #> 9      P07766 # We fill by grouping the Catalogue number: citeseq <- citeseq %>%      AbNames::fillByGroup(\"Cat_Number\", multiple = \"mode\",                           fill = c(\"HGNC_ID\", \"TotalSeq_Cat\", \"Vendor\",                                            \"ENSEMBL_ID\", \"UNIPROT_IDS\"))  nmatched_after_fill <- count_missing(citeseq)  print(\"Before filling:\") #> [1] \"Before filling:\" original_nmatched #> [1] 162 print(\"After filling:\") #> [1] \"After filling:\" nmatched_after_fill #> [1] 140"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"querying-the-protein-ontology","dir":"Articles","previous_headings":"","what":"Querying the protein ontology","title":"Introduction to AbNames","text":"Let’s see antibodies matched HGNC.","code":"citeseq %>%     dplyr::filter(is.na(HGNC_ID)) %>%     pull(Antigen) %>%     sort() %>%     unique() #>  [1] \"Annexin V\"                 \"anti-c-Met\"                #>  [3] \"Anti-PE\"                   \"anti-Tau Phospho (Thr181)\" #>  [5] \"B220 (CD45R)\"              \"CD11a.CD18\"                #>  [7] \"CD11a/CD18 (LFA-1)\"        \"CD158folate Receptor β (FR-β)\"  #> [27] \"GP130\"                     \"HLA-A2\"                    #> [29] \"HLA-DR\"                    \"HLADR\"                     #> [31] \"Ig light chain lambda\"     \"Ig light chain λ\"          #> [33] \"IgG\"                       \"IgG (Fc)\"                  #> [35] \"IgG Fc\"                    \"IgG.Fc\"                    #> [37] \"integrin β7\"               \"KLRG1 (MAFA)\"              #> [39] \"MHCII (HLA-DR)\"            \"PD-1\"                      #> [41] \"PD-1 (CD279)\"              \"PD1 (CD279)\"               #> [43] \"Phospho (Thr181)\"          \"Podocalyxin\"               #> [45] \"TCR Va7.2\"                 \"TCR Vbeta13.1\"             #> [47] \"TCR Vα7.2\"                 \"TCR Vβ13.1\"                #> [49] \"TCRa7.2\"                   \"TCRVa7.2\"                  #> [51] \"β2-microglobulin\"  missing <- citeseq %>%     dplyr::filter(is.na(HGNC_ID)) %>%     dplyr::select(ID, Antigen)"},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"to-do","dir":"Articles","previous_headings":"Querying the protein ontology","what":"TO DO","title":"Introduction to AbNames","text":"example (interactively) deciding groups inconsistent. Standardise names singlecellexperiment Check new annotations previous Isotype controls Add checks filling values unique Add control column isotype controls prevent false match mouse IgG2a Add ignore option split merge?  CD25 (good example, multiple genes), CD270, CD279 matched HGNC? # CD279 PD-1 - example matched # Fix Hao Clone CD25 # Search similar genes master table # Generate camel case regexp? # Split HGNC alias_name, prev_name - keep contains “antigen” “CD”? # Unintuitive use quoted splitUnnest # Uniprot ids - possible split create complex uniprot modification # uniprot? # Redocument data sets # HAO CD45 catalogue numbers! # union join back gene ID / get info antigen","code":""},{"path":"https://helenlindsay.github.io/AbNames/articles/AbNames.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to AbNames","text":"","code":"sessionInfo() #> R version 4.2.0 (2022-04-22) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.0.9      AbNames_0.1.0    BiocStyle_2.24.0 #>  #> loaded via a namespace (and not attached): #>  [1] bslib_0.3.1         compiler_4.2.0      pillar_1.7.0        #>  [4] BiocManager_1.30.18 jquerylib_0.1.4     tools_4.2.0         #>  [7] digest_0.6.29       tibble_3.1.7        jsonlite_1.8.0      #> [10] evaluate_0.15       memoise_2.0.1       lifecycle_1.0.1     #> [13] pkgconfig_2.0.3     rlang_1.0.2         DBI_1.1.3           #> [16] cli_3.3.0           yaml_2.3.5          pkgdown_2.0.4       #> [19] xfun_0.31           fastmap_1.1.0       stringr_1.4.0       #> [22] knitr_1.39          desc_1.4.1          generics_0.1.2      #> [25] fs_1.5.2            sass_0.4.1          vctrs_0.4.1         #> [28] systemfonts_1.0.4   tidyselect_1.1.2    rprojroot_2.0.3     #> [31] glue_1.6.2          R6_2.5.1            textshaping_0.3.6   #> [34] fansi_1.0.3         rmarkdown_2.14      bookdown_0.27       #> [37] tidyr_1.2.0         purrr_0.3.4         magrittr_2.0.3      #> [40] htmltools_0.5.2     ellipsis_0.3.2      assertthat_0.2.1    #> [43] ragg_1.2.2          utf8_1.2.2          stringi_1.7.6       #> [46] cachem_1.0.6        crayon_1.5.1"},{"path":"https://helenlindsay.github.io/AbNames/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Helen Lindsay. Author, maintainer.","code":""},{"path":"https://helenlindsay.github.io/AbNames/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lindsay H (2022). AbNames: Standardize Antibody Names. R package version 0.1.0, https://github.com/HelenLindsay/AbNames.","code":"@Manual{,   title = {AbNames: Standardize Antibody Names},   author = {Helen Lindsay},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/HelenLindsay/AbNames}, }"},{"path":"https://helenlindsay.github.io/AbNames/index.html","id":"abnames","dir":"","previous_headings":"","what":"Standardize Antibody Names","title":"Standardize Antibody Names","text":"AbNames aims match antibody names gene protein identifiers, help standardise names across data sets. Currently development, feel free contact questions contributions.","code":""},{"path":"https://helenlindsay.github.io/AbNames/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Standardize Antibody Names","text":"can install development version AbNames GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"HelenLindsay/AbNames\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/addID.html","id":null,"dir":"Reference","previous_headings":"","what":"add ID column — addID","title":"add ID column — addID","text":"Adds ID column data frame","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/addID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add ID column — addID","text":"","code":"addID(   df,   id_cols = c(\"Antigen\", \"Study\"),   new_col = \"ID\",   warn = TRUE,   sep = \"__\" )"},{"path":"https://helenlindsay.github.io/AbNames/reference/addID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add ID column — addID","text":"df data.frame tibble id_cols (character(n)) Names columns paste form ID column new_col (character(1), default: \"ID\") Name new ID column warn (TRUE/FALSE, default: TRUE) TRUE, warn IDs unique sep (Default: __) Delimiter use pasting columns form ID","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/addID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add ID column — addID","text":"df extra ID column","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/addID.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add ID column — addID","text":"Pastes group columns together form ID column.  pasted values uniquely identify rows, adds number end.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dashNotDot.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dashes (-) to dots(.) — dashNotDot","title":"Convert dashes (-) to dots(.) — dashNotDot","text":"Convert character vector lowercase replace \"-\" \".\" Values NA new value identical original value.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dashNotDot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dashes (-) to dots(.) — dashNotDot","text":"","code":"dashNotDot(ab)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dashNotDot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dashes (-) to dots(.) — dashNotDot","text":"ab (character(n)) vector strings transform","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/defaultQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Default list of functions for making an antibody query table — defaultQuery","title":"Default list of functions for making an antibody query table — defaultQuery","text":"Default list functions making antibody query table","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/defaultQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default list of functions for making an antibody query table — defaultQuery","text":"","code":"defaultQuery(ab = \"Antigen\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/defaultQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default list of functions for making an antibody query table — defaultQuery","text":"ab (character(1), default \"Antigen\") Name column df containing Antigen/Antibody names id_cols (character(n)) Names columns paste form ID column","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-checkSubunitMatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if all subunits of a multi-subunit protein are matched\nInternal AbNames function for removing spurious matches caused by guessing\nsubunit names.  Column names are hard-coded and expected to match the default\npipeline.  Returns a table containing gene name matches with spurious matches\nremoved. — .checkSubunitMatches","title":"Check if all subunits of a multi-subunit protein are matched\nInternal AbNames function for removing spurious matches caused by guessing\nsubunit names.  Column names are hard-coded and expected to match the default\npipeline.  Returns a table containing gene name matches with spurious matches\nremoved. — .checkSubunitMatches","text":"Check subunits multi-subunit protein matched Internal AbNames function removing spurious matches caused guessing subunit names.  Column names hard-coded expected match default pipeline.  Returns table containing gene name matches spurious matches removed.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-checkSubunitMatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if all subunits of a multi-subunit protein are matched\nInternal AbNames function for removing spurious matches caused by guessing\nsubunit names.  Column names are hard-coded and expected to match the default\npipeline.  Returns a table containing gene name matches with spurious matches\nremoved. — .checkSubunitMatches","text":"","code":".checkSubunitMatches(df, query_df)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-checkSubunitMatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if all subunits of a multi-subunit protein are matched\nInternal AbNames function for removing spurious matches caused by guessing\nsubunit names.  Column names are hard-coded and expected to match the default\npipeline.  Returns a table containing gene name matches with spurious matches\nremoved. — .checkSubunitMatches","text":"df data frame containing matches gene names database query_df data.frame containing potential gene/protein names, one","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-freducePartial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of partial functions and apply in sequence — .freducePartial","title":"Create a list of partial functions and apply in sequence — .freducePartial","text":"Apply function f repeatedly different columns data.frame.  Assumes ellipsis arguments contain () one vector entry function f applied sequentially entries.  work unquoted column names","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-freducePartial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of partial functions and apply in sequence — .freducePartial","text":"","code":".freducePartial(df, f, cls, ...)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-freducePartial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of partial functions and apply in sequence — .freducePartial","text":"df data.frame tibble f Function returns (mutated) data.frame cls character(1) Name entry ... iterating. ... Extra arguments f","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-getGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the first n groups of a grouped data.frame — .getGroups","title":"Return the first n groups of a grouped data.frame — .getGroups","text":"Useful debugging, e.g. trying fill groups contain multiple values.  Group order determined dplyr::group_rows","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-getGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the first n groups of a grouped data.frame — .getGroups","text":"","code":".getGroups(df, i = 1, n = 1, row_idxs = NULL)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-getGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the first n groups of a grouped data.frame — .getGroups","text":"df grouped data.frame (integer(1), default: 1) index first group return n (integer(1), default: 1) many groups returned? row_idxs (Optional, default: NULL) Indices rows","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-printGroupMatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a group from a data.frame, format into a printable string — .printGroupMatch","title":"Select a group from a data.frame, format into a printable string — .printGroupMatch","text":"Get first group grouped data.frame matching condition format output printing error message.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-printGroupMatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a group from a data.frame, format into a printable string — .printGroupMatch","text":"","code":".printGroupMatch(df, flt)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-printGroupMatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a group from a data.frame, format into a printable string — .printGroupMatch","text":"df data.frame tibble flt (unquoted) expression using dplyr::filter","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-printf.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for sprintf, doesn't convert NA to character — .printf","title":"Wrapper for sprintf, doesn't convert NA to character — .printf","text":"Wrapper sprintf, convert NA character","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-printf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for sprintf, doesn't convert NA to character — .printf","text":"","code":".printf(pattern, ...)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-printf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for sprintf, doesn't convert NA to character — .printf","text":"pattern pattern use sprintf ... Extra arguments sprintf","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-separateSubunits.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate multi-subunit protein names into one name per row — .separateSubunits","title":"Separate multi-subunit protein names into one name per row — .separateSubunits","text":"Separates column provided pattern, separates second second individual letters joins segments provided joining pattern","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-separateSubunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate multi-subunit protein names into one name per row — .separateSubunits","text":"","code":".separateSubunits(df, ab, new_col, pattern, join_pattern, t1, t2)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-separateSubunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate multi-subunit protein names into one name per row — .separateSubunits","text":"df data.frame tibble ab name column containing names split new_col name new column containing split names pattern regex pattern use splitting join_pattern sprintf pattern joining t1 (start) t2 (end) t1 first temporary column name t2 second temporary column name","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-sharedSubstr.html","id":null,"dir":"Reference","previous_headings":"","what":"Group based on shared substrings — .sharedSubstr","title":"Group based on shared substrings — .sharedSubstr","text":"Takes vector words corresponding vector group ids returns numeric vector indicating groupings members group share word least one member group.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-sharedSubstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group based on shared substrings — .sharedSubstr","text":"","code":".sharedSubstr(x, id)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-sharedSubstr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group based on shared substrings — .sharedSubstr","text":"x Character vector words id Vector group ids","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-sharedSubstr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group based on shared substrings — .sharedSubstr","text":"","code":"# \"fox\" occurs in groups 1 and 3, and \"box\" occurs in groups 3 and 4, # so these groups are grouped together sharedSubstr(c(\"fox\", \"cat\", \"fox\", \"in\", \"box\", \"box\"), c(1, 2, 3, 3, 3, 4)) #> Error in UseMethod(\"arrange\"): no applicable method for 'arrange' applied to an object of class \"character\""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-tempColName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a name for a temporary column in a data.frame — .tempColName","title":"Create a name for a temporary column in a data.frame — .tempColName","text":"Returns name already exist columns data.frame","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-tempColName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a name for a temporary column in a data.frame — .tempColName","text":"","code":".tempColName(df, n = 1, nm = \"TEMP\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-tempColName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a name for a temporary column in a data.frame — .tempColName","text":"df data.frame tibble n (default 1) many temporary column names needed? nm (character(1), default \"TEMP\") Prefix temporary column names","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-warnIfColExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn if a column already exists in a data.frame — .warnIfColExists","title":"Warn if a column already exists in a data.frame — .warnIfColExists","text":"Warn column already exists data.frame","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-warnIfColExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn if a column already exists in a data.frame — .warnIfColExists","text":"","code":".warnIfColExists(df, new_col)"},{"path":"https://helenlindsay.github.io/AbNames/reference/dot-warnIfColExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn if a column already exists in a data.frame — .warnIfColExists","text":"df data.frame tibble new_col character(1) Name column add df","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/fillByGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill NAs in data.frame by grouping — fillByGroup","title":"Fill NAs in data.frame by grouping — fillByGroup","text":"Wrapper tidyr::fill checks NAs grouping values option fill majority value one value per group. error raised, example group causes error returned","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/fillByGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill NAs in data.frame by grouping — fillByGroup","text":"","code":"fillByGroup(df, group, fill, multiple = c(\"stop\", \"mode\"))"},{"path":"https://helenlindsay.github.io/AbNames/reference/fillByGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill NAs in data.frame by grouping — fillByGroup","text":"df data.frame tibble missing (NA) values filled group (character(n)) Names column(s) group fill (character(n)) Name(s) column(s) fill multiple (Default: \"stop\") multiple values columns filled handled?  Either \"stop\" (raise error) \"mode\" (select common value)","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatIg.html","id":null,"dir":"Reference","previous_headings":"","what":"Format immunoglobin antibody names — formatIg","title":"Format immunoglobin antibody names — formatIg","text":"Adds column data.frame containing immunoglobin names re-formatted match HGNC symbols. Assumes Greek symbols converted single letters.  Diversity joining regions implemented.  final /b e.g. IgG2a dropped, specific modification protein ontology HGNC. lambda light chain matched HGNC gene number provided.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatIg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format immunoglobin antibody names — formatIg","text":"","code":"formatIg(df, ig = \"Antigen\", new_col = \"Ig\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/formatIg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format immunoglobin antibody names — formatIg","text":"df data.frame tibble ig (character(1), default \"Antigen\") Name column containing antibody names new_col (character(1), default \"Ig\") Name column containing re-formatted immunoglobin names add df","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCR.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert T-cell receptor antigen names — formatTCR","title":"Convert T-cell receptor antigen names — formatTCR","text":"Convert T-cell antigen names long format used HGNC gene descriptions, e.g. \"T cell receptor gamma variable 24.  Greek symbols words converted letters using function","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert T-cell receptor antigen names — formatTCR","text":"","code":"formatTCR(df, tcr = \"TCR\", new_col = \"TCR_long\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert T-cell receptor antigen names — formatTCR","text":"df data.frame tibble tcr (character(1)) Name column df containing TCR names new_col (character(1)) Name column ","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert T-cell receptor antigen names — formatTCR","text":"df long form one subunit per row new column \"new_col\" containing TCR gene description query string","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCRv.html","id":null,"dir":"Reference","previous_headings":"","what":"Format TCR (vector) — formatTCRv","title":"Format TCR (vector) — formatTCRv","text":"Used formatTCR, accepts vector (one column data.frame), returns long data.frame new column containing TCR description","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCRv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format TCR (vector) — formatTCRv","text":"","code":"formatTCRv(tcr, new_col = \"TCR_long\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/formatTCRv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format TCR (vector) — formatTCRv","text":"tcr vector T cell receptor antibody names new_col name new column containing TCR description","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/groupMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the most common value per group — groupMode","title":"Find the most common value per group — groupMode","text":"Given grouped data.frame, count values per group return vector common value group.  several equally common values, first chosen.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/groupMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the most common value per group — groupMode","text":"","code":"groupMode(df, cl, gp, new_cl = NA, min_n = NA, n = NA)"},{"path":"https://helenlindsay.github.io/AbNames/reference/groupMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the most common value per group — groupMode","text":"df grouped tibble cl Name column find mode gp Name(s) columns group new_cl Name column create.  NA (default), col modified min_n (integer(1), default NA) Minimum number occurrences majority value.  provided, majority value set NA occurs less min_n times. n Name column containing counts.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/gsubAb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to remove a pattern from a column in a data.frame — gsubAb","title":"Convenience function to remove a pattern from a column in a data.frame — gsubAb","text":"Remove pattern column, either modifying place creating new column.  default pattern removes prefix \"anti-\" \"Anti-\".","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/gsubAb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to remove a pattern from a column in a data.frame — gsubAb","text":"","code":"gsubAb(   df,   ab = \"Antigen\",   pattern = \"[Aa]nti-\",   replacement = \"\",   exclude = NA,   restrict = NA,   new_col = NA )"},{"path":"https://helenlindsay.github.io/AbNames/reference/gsubAb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to remove a pattern from a column in a data.frame — gsubAb","text":"df data.frame tibble ab (character(1), default \"Antigen) Name column remove prefixes pattern (character(1)) regular expression matching column ab. replacement (character(1)) Replacement value, default \"\" (.e. remove) exclude (Default: NA) - NOTHING YET restrict (Default: NA) - NOTHING YET new_col (character(1), default NA Name column add df. NA, column ab modified","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene names, symbols and IDs from HGNC — hgnc","title":"Gene names, symbols and IDs from HGNC — hgnc","text":"table gene ids, symbols, aliases, previous aliases, names Human Genome Naming Consortium, corresponding genome build GRCh38.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene names, symbols and IDs from HGNC — hgnc","text":"","code":"hgnc"},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene names, symbols and IDs from HGNC — hgnc","text":"data frame 30123 rows 10 variables: HGNC_ID HGNC gene IDs HGNC_SYMBOL HGNC gene symbol HGNC_NAME HGNC gene name (short description words) alias_symbol comma separated list current gene symbol aliases prev_symbol comma separated list formerly used symbol aliases ENSEMBL_ID Ensembl gene ID corresponding HGNC_ID Chromosome Chromosomal location gene alias_name Names gene aliases, separated \"|\" prev_name Names former gene aliases, separated \"|\" UNIPROT_IDS Uniprot ID(s) corresponding HGNC_ID","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gene names, symbols and IDs from HGNC — hgnc","text":"\"https://www.genenames.org/cgi-bin/genegroup/download-\"","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene ids, names and aliases from HGNC, in long format — hgnc_long","title":"Gene ids, names and aliases from HGNC, in long format — hgnc_long","text":"Contains data hgnc, aliases, previous aliases names split contain one entry per row, additional \"symbol_type\" column giving source symbol (e.g. HGNC_SYMBOL, alias_symbol).  Chromosome data included.  CD3 removed information totalseq tables match information vendor website.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene ids, names and aliases from HGNC, in long format — hgnc_long","text":"","code":"hgnc_long"},{"path":"https://helenlindsay.github.io/AbNames/reference/hgnc_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene ids, names and aliases from HGNC, in long format — hgnc_long","text":"data frame 90788 rows 7 variables: HGNC_ID HGNC gene IDs ENSEMBL_ID Ensembl gene ID corresponding HGNC_ID alias_name Names gene aliases, separated \"|\" prev_name Names former gene aliases, separated \"|\" UNIPROT_IDS Uniprot ID(s) corresponding HGNC_ID symbol_type Source \"value\" column, e.g. \"HGNC_SYMBOL\" value gene symbol name","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/lowerNoDash.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert values to lowercase and replace - with space — lowerNoDash","title":"Convert values to lowercase and replace - with space — lowerNoDash","text":"Convert character vector lowercase replace - spaces. Values NA new value identical original value.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/lowerNoDash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert values to lowercase and replace - with space — lowerNoDash","text":"","code":"lowerNoDash(ab)"},{"path":"https://helenlindsay.github.io/AbNames/reference/lowerNoDash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert values to lowercase and replace - with space — lowerNoDash","text":"ab (character(n)) vector strings transform","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/makeQueryTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate Antibody/Antigen names into component parts — makeQueryTable","title":"Separate Antibody/Antigen names into component parts — makeQueryTable","text":"Given data.frame containing Antigen/Antibody names, reformat names possible gene names return data.frame long format.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/makeQueryTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate Antibody/Antigen names into component parts — makeQueryTable","text":"","code":"makeQueryTable(df, ab = \"Antigen\", control_col = NA)"},{"path":"https://helenlindsay.github.io/AbNames/reference/makeQueryTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate Antibody/Antigen names into component parts — makeQueryTable","text":"df data.frame tibble ab (character(1), default: \"Antigen\") Name column df containing antibody names control_col (character(1), default: NA)  Optional name logical column indicating whether antibody isotype control.  present, controls removed avoid spurious matches usually react human genes.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/nPerGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Group a data.frame and count unique values — nPerGroup","title":"Group a data.frame and count unique values — nPerGroup","text":"Grouping columns containing NAs considered.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/nPerGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group a data.frame and count unique values — nPerGroup","text":"","code":"nPerGroup(df, group, col, nm = \"n_per_group\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/nPerGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group a data.frame and count unique values — nPerGroup","text":"df data.frame tibble group character(n) Character vector name(s) grouping columns col character(1) Name column count distinct values nm character(1), default: \"n_per_group\". Name column containing counts distinct values per group.  nm already column df, integer suffix added.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://helenlindsay.github.io/AbNames/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/replaceGreekSyms.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Greek symbols or symbol names — replaceGreekSyms","title":"Replace Greek symbols or symbol names — replaceGreekSyms","text":"Replace Greek symbols either single letter word.  Note replaces greek symbols encountered far antibody names avoid introducing errors e.g. replacing \"mu\" \"immunoglobin\".","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/replaceGreekSyms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Greek symbols or symbol names — replaceGreekSyms","text":"","code":"replaceGreekSyms(x, replace = c(\"sym2letter\", \"sym2word\", \"word2letter\"))"},{"path":"https://helenlindsay.github.io/AbNames/reference/replaceGreekSyms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Greek symbols or symbol names — replaceGreekSyms","text":"x Character vector (n) containing Greek symbols replaced. replace Either \"sym2letter\" (replace Greek symbols single lowercase letter) \"sym2word\" (replace Greek symbols lowercase word, e.g. \"alpha\") \"word2letter\" (replace lowercase Greek symbol names single lowercase letters e.g. \"alpha\" \"\")","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/replaceGreekSyms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Greek symbols or symbol names — replaceGreekSyms","text":"Character vector (n) Greek symbols names replaced","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/searchHGNC.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for matches to antibody names in HGNC protein coding genes — searchHGNC","title":"Search for matches to antibody names in HGNC protein coding genes — searchHGNC","text":"Search HGNC gene symbols, aliases names exact match value, assumed antigen name part antigen name. query_df must columns named \"ID\", \"name\" \"value\".","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/searchHGNC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for matches to antibody names in HGNC protein coding genes — searchHGNC","text":"","code":"searchHGNC(query_df, multisubunit = c(\"TCR_long\", \"subunit\"))"},{"path":"https://helenlindsay.github.io/AbNames/reference/searchHGNC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for matches to antibody names in HGNC protein coding genes — searchHGNC","text":"query_df data.frame long format searching exact matches HGNC names.  Must contain column \"value\" containing potential gene symbols matching HGNC symbols descriptions, column \"ID\" grouping results, column \"name\" indicating type match (used multi-subunit proteins TCRs). multisubunit character(n) Name(s) entries \"name\" column corresponding multi-subunit proteins.  Use NA none exist.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/searchHGNC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for matches to antibody names in HGNC protein coding genes — searchHGNC","text":"data.frame matches IDs query_df HGNC genes, including column \"n_matches\" giving number matches different genes.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/separateSubunits.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate multi-subunit protein names — separateSubunits","title":"Separate multi-subunit protein names — separateSubunits","text":"Separate names antibodies multi-subunit proteins e.g. CD235ab, CD66ace one subunit per row. Two subunit patterns considered.  first, subunits lower case letters gene name separator, e.g. CD66ace composed subunits CD66a, CD66b CD66c.  second pattern, subunits written uppercase letters separated \"-\", e.g. HLA-/C/E composed subunits HLA-, HLA-C HLA-E.  patterns require least least 2 capital letters numbers followed least 2 possible subunits. may separator groups /lower case letters.  present, group separators -, . space, subunit separators / . Subunits converted Greek symbols applying function. present user-supplied regex patterns supported","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/separateSubunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate multi-subunit protein names — separateSubunits","text":"","code":"separateSubunits(df, ab = \"Antigen\", new_col = \"subunit\")"},{"path":"https://helenlindsay.github.io/AbNames/reference/separateSubunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate multi-subunit protein names — separateSubunits","text":"df data.frame tibble ab (character(1), default \"Antigen) Name column containing antibody names new_col (default: subunit) Name new column containing guesses single subunit names","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/showGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively print individual groups of a grouped data.frame — showGroups","title":"Interactively print individual groups of a grouped data.frame — showGroups","text":"Print first group grouped data.frame, prompt user either print next group quit.   Group order determined dplyr::group_rows.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/showGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively print individual groups of a grouped data.frame — showGroups","text":"","code":"showGroups(df, i = 1, n = 1, max_rows = 50, interactive = TRUE)"},{"path":"https://helenlindsay.github.io/AbNames/reference/showGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively print individual groups of a grouped data.frame — showGroups","text":"df *grouped* data.frame (integer(1), default 1) Index group printed. n (integer(1), default 1) many groups show ? max_rows integer(1) Maximum number rows print (Default: 50). interactive (default: TRUE) function wait command prompt show next group?","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/splitMerge.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to a subset of a data.frame — splitMerge","title":"Apply a function to a subset of a data.frame — splitMerge","text":"Subset data.frame according condition, apply function rows condition TRUE, rejoin rows condition FALSE NA.  split-apply-combine function applied subset rows. Filtering expression can either quoted unquoted, e.g. complete.cases(x, y) (x y column names) \"complete.cases(x, y)\".  filter multiple conditions use \"&\", e.g. \"x == 1 & y == 2\"","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/splitMerge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to a subset of a data.frame — splitMerge","text":"","code":"splitMerge(df, ex, f, ...)"},{"path":"https://helenlindsay.github.io/AbNames/reference/splitMerge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to a subset of a data.frame — splitMerge","text":"df data.frame tibble ex character(1) character expression filtering df using dplyr::filter, e.g. 'grepl(\"X\", colname)' f function apply rows ex TRUE returns data.frame ... Extra arguments f","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/splitMerge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to a subset of a data.frame — splitMerge","text":"df function f applied rows ex TRUE","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/splitUnnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a column and create one row per entry — splitUnnest","title":"Split a column and create one row per entry — splitUnnest","text":"Convenience function splitting column delimiter, unnesting (one row per value splitting) removing unnecessary whitespace.  Default split brackets.  Returns tibble tbl_df.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/splitUnnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a column and create one row per entry — splitUnnest","text":"","code":"splitUnnest(   df,   ab = \"Antigen\",   split = \"[\\\\(\\\\)]\",   new_col = NA,   exclude = NA )"},{"path":"https://helenlindsay.github.io/AbNames/reference/splitUnnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a column and create one row per entry — splitUnnest","text":"df data.frame tibble ab (character(1), default \"Antigen) Name column remove prefixes split (character(1), default \"[\\(\\)]\") regular expression using strsplit. default expression splits \"(\" \")\". new_col (character(1), default NA Name column add df. NA, column ab modified. exclude (character(1), default NA) regex - split ab matches.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/splitUnnest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a column and create one row per entry — splitUnnest","text":"","code":"df <- data.frame(Antigen = c(\"CD279 (PD-1)\", \"Mac-2 (Galectin-3)\")) splitUnnest(df, \"Antigen\", new_col = \"Split\") #> # A tibble: 4 × 2 #>   Antigen            Split      #>   <chr>              <chr>      #> 1 CD279 (PD-1)       CD279      #> 2 CD279 (PD-1)       PD-1       #> 3 Mac-2 (Galectin-3) Mac-2      #> 4 Mac-2 (Galectin-3) Galectin-3"},{"path":"https://helenlindsay.github.io/AbNames/reference/totalseq_cocktails.html","id":null,"dir":"Reference","previous_headings":"","what":"Antibody and gene information for TotalSeq cocktails from BioLegend — totalseq_cocktails","title":"Antibody and gene information for TotalSeq cocktails from BioLegend — totalseq_cocktails","text":"table contains information downloaded www.biolegend.com preprocessed consistent format.  TotalSeq , B, C D (Heme Oncology) cocktails included.","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/totalseq_cocktails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antibody and gene information for TotalSeq cocktails from BioLegend — totalseq_cocktails","text":"","code":"totalseq_cocktails"},{"path":"https://helenlindsay.github.io/AbNames/reference/totalseq_cocktails.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Antibody and gene information for TotalSeq cocktails from BioLegend — totalseq_cocktails","text":"data frame 485 rows 8 variables: Oligo_ID BioLegend identifier oligo Barcode_Sequence Antigen Name antigen (antibody name minus \"anti-\" prefix) Clone Name cell line produced antibody Ensembl_ID Ensembl gene identifier Gene_Symbol Ensembl gene symbol TotalSeq_Cat Identifier TotalSeq cocktail Barcode_Sequence Sequence DNA oligo conjuated antibody Reactivity Species antibody bind, usually human","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/totalseq_cocktails.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Antibody and gene information for TotalSeq cocktails from BioLegend — totalseq_cocktails","text":"\"https://www.biolegend.com/\"","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/upperSquish.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert values to uppercase and remove punctuation — upperSquish","title":"Convert values to uppercase and remove punctuation — upperSquish","text":"Convert character vector uppercase remove dashes, spaces dots. Values NA new value identical original value converted original value 2 segments separated , punctuation, e.g. \"IFN-g\" become \"IFNG\" \"IFN-g R alpha-chain\" new value NA","code":""},{"path":"https://helenlindsay.github.io/AbNames/reference/upperSquish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert values to uppercase and remove punctuation — upperSquish","text":"","code":"upperSquish(ab)"},{"path":"https://helenlindsay.github.io/AbNames/reference/upperSquish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert values to uppercase and remove punctuation — upperSquish","text":"ab (character(n)) vector strings transform","code":""},{"path":"https://helenlindsay.github.io/AbNames/news/index.html","id":"abnames-010","dir":"Changelog","previous_headings":"","what":"AbNames 0.1.0","title":"AbNames 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
